<?php

  /**
   * simple class to read an XML formatted log generated by Zend_Log
   * @author Rebecca Sutton Koeser August 2008
   *
   * @category EmoryZF
   * @package Emory_Log
   */

class Emory_Log_Reader_Xml {

  /**
   * @var $log simplexml element with contents of Xml Log
   */
  private $log;
  
  public function __construct($filename) {

    // Zend Xml Log is not wrapped in any top-level element; wrapping
    // to get valid xml that can be parsed into a single xml document
    $xml = "<logfile>" . file_get_contents($filename) . "</logfile>";

    // if Tidy is installed, use it to clean up any entities simplexml can't handle on its own
    if (function_exists("tidy_repair_string")) {
      $tidy_opts = array("input-xml" => true,		// treat as xml; don't add html header tags
			 "output-xml" => true,
			 "numeric-entities" => true,
			 );
      $xml = tidy_repair_string($xml, $tidy_opts);
    }

    
    $this->log = simplexml_load_string($xml);

  }


  public function getEntries(array $filter = array()) {
    $xpath_filter = "";
    if (isset($filter['priority']))
      $xpath_filter .= "[priority <= " . $filter['priority'] . "]";
    if (isset($filter['username'])) 	// custom field for ETDs
      $xpath_filter .= "[username = '" . $filter['username'] . "']";

    $xpath = "logEntry" . $xpath_filter;

    $entries = $this->log->xpath($xpath);
    return $entries;
  }

  /**
   * return a list of distinct values for the specified field
   * @param string $field
   * @return array 
   */
  public function getValues($field) {
    $values = $this->log->xpath("//$field");
    $distinct = array();
    foreach ($values as $node) {
      $distinct[(string)$node] = 1;
    }
    return array_keys($distinct);
  }
  
}